[
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#__docusaurus_skipToContent_fallback",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Welcome to Keploy Documentation! üöÄ",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "This documentation is your roadmap to becoming a Keploy expert, whether you're a seasoned developer or just starting out. üó∫Ô∏è"
  },
  {
    "heading": "What is Keploy? ü§î",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Keploy is your open-source, developer-centric backend testing tool. It makes backend testing easy and productive for engineering teams. Plus, it's easy-to-use, powerful and extensible..üõ†Ô∏è\nKeploy creates test cases and data mocks/stubs from user-traffic by recording API calls and DB queries, significantly speeding up releases and enhancing reliability. üìà"
  },
  {
    "heading": "Contribute through Hacktoberfest ‚úÖ",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "DigitalOcean's Hacktoberfest is a month-long celebration of open-source contributions. Everyone is welcome to participate, regardless of their experience level. Simply make a pull request to an open-source project to get started. You can contribute to several Keploy projects participating this year, If you‚Äôve ever wanted to contribute to open source , now is your chance! Anyone around the globe who desires to help drive the growth of open source and make positive contributions to an ever-growing community. All backgrounds and skill levels are encouraged to participate. Learn How to Contribute?"
  },
  {
    "heading": "Installation Guide üìó",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Let's get Keploy up and running on your Windows, Linux, or macOS machine, so you can start crafting test cases in minutes. ‚è±Ô∏è\n‚ö†Ô∏è Please note that Keploy v2 is currently in development, with the best experience on Linux. Docker support is experimental and may have some limitations for certain use cases."
  },
  {
    "heading": "Supports",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": ""
  },
  {
    "heading": "Languages",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": ""
  },
  {
    "heading": "Dependencies Support",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": ""
  },
  {
    "heading": "Quick Links",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": ""
  },
  {
    "heading": "üê∞ Join Our Community Forum",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Are you curious, ü§î or do you have questions burning in your mind? üî• Look no further! Join our lively Community Forum where you can:\nWe are happy to help you with your üé§ talks, üìù blogposts (whether on our blog or yours) or anything else you want to try. Just get in touch!"
  },
  {
    "heading": "YouTube",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Watch tutorials and meetups with Keploy users."
  },
  {
    "heading": "Meetup",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Join our monthly meetup and ask questions!"
  },
  {
    "heading": "GitHub",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Give Keploy a star on GitHub (it helps!)"
  },
  {
    "heading": "Twitter",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Follow @keployio for Keploy news and events."
  },
  {
    "heading": "Slack",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Join for live conversations and get support."
  },
  {
    "heading": "Blogs",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Explore blogs on API, Testing, Mocks and Keploy."
  },
  {
    "heading": "Keploy Installation‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "üõ†Ô∏è Platform-Specific Requirements for Keploy‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#Ô∏è-platform-specific-requirements-for-keploy",
    "body": "Below is a table summarizing the tools needed for both native and Docker installations of Keploy on MacOS, Windows, and\nLinux:\nOn MacOS and Windows, additional tools are required for Keploy due to the lack of native eBPF support."
  },
  {
    "heading": "Keploy Installation‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#keploy-installation",
    "body": ""
  },
  {
    "heading": "Quick Installation Using CLI‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#quick-installation-using-cli",
    "body": "Let's get started by setting up the Keploy alias with this command:\nYou should see something like this:\nüéâ Wohoo! You are all set to use Keploy."
  },
  {
    "heading": "Other Installation Methods‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#other-installation-methods",
    "body": ""
  },
  {
    "heading": "Downloading and running Keploy in Docker‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#downloading-and-running-keploy-in-docker",
    "body": ""
  },
  {
    "heading": "On macOS‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#on-macos",
    "body": "Note : Keploy is not supported natively on MacOS, so you can follow the below method to run with docker"
  },
  {
    "heading": "Downloading and running Keploy in Native‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#downloading-and-running-keploy-in-native",
    "body": "Prequisites:"
  },
  {
    "heading": "On WSL/Linux AMD‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#on-wsllinux-amd",
    "body": ""
  },
  {
    "heading": "On WSL/Linux ARM‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#on-wsllinux-arm",
    "body": ""
  },
  {
    "heading": "Setting up the Docker Desktop for WSL 2‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#setting-up-the-docker-desktop-for-wsl-2",
    "body": "When developing on Windows with Docker Desktop and WSL 2, it's crucial to configure Docker Desktop to allow WSL 2 distributions to access the Docker daemon. This setup enables seamless integration between your Windows environment, WSL 2 Linux distros, and Docker.\nBy default, Docker Desktop may not be configured to work with all WSL 2 distros out of the box. Proper configuration ensures that you can run Docker commands from within your WSL 2 environment, allowing for a more native Linux development experience while leveraging the power of Windows."
  },
  {
    "heading": "With Arkade‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#with-arkade",
    "body": "Or you can also download specific version of Keploy using the following command:"
  },
  {
    "heading": "üé¨ Capturing Testcases‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#-capturing-testcases",
    "body": "To initiate the recording of API calls, execute this command in your terminal:\nFor example, if you're using a simple Golang program, the CMD_TO_RUN_APP would resemble:"
  },
  {
    "heading": "üèÉ Running Testcases‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#-running-testcases",
    "body": "To run the testcases and see if there are any regressions introduced, use this terminal command:\nExplore the Test Coverage Generation Guide for seeing test-coverage with your unit testing library and Keploy Running Guide for additional options and tips on customizing your Keploy setup to perfection."
  },
  {
    "heading": "Contribution Guide üöÄ‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#contribution-guide-",
    "body": ""
  },
  {
    "heading": "1. Setting Up Your Platform:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#1-setting-up-your-platform",
    "body": "Running Keploy on macOS or Windows? No problem! You'll need to create a Linux VM.\nNote: Linux Users are good to go."
  },
  {
    "heading": "2. Pre-requisites:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#2-pre-requisites",
    "body": "First things first, ensure you have Golang installed."
  },
  {
    "heading": "3. Cloning Keploy Repository:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#3-cloning-keploy-repository",
    "body": "Time to get your hands on Keploy! Run these commands to clone the repository and download those Go dependencies:"
  },
  {
    "heading": "4. Running Keploy on v2:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#4-running-keploy-on-v2",
    "body": "The Keploy CLI operates by capturing all network traffic between your application and its dependencies.\nIt meticulously records API calls, database queries, and any other interactions your application engages in.\nOnce the recording phase is complete, Keploy can effortlessly generate test cases and data mocks in YAML format."
  },
  {
    "heading": "Keploy operates in two modes:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#keploy-operates-in-two-modes",
    "body": "To dive into Keploy, you can use the gin-mongo URL Shortener sample application:"
  },
  {
    "heading": "Let's clone sample app repo:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#lets-clone-sample-app-repo",
    "body": ""
  },
  {
    "heading": "Now let's try running keploy:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#now-lets-try-running-keploy",
    "body": ""
  },
  {
    "heading": "Capturing Test Cases:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#capturing-test-cases",
    "body": "After entering record mode, send requests to your application to generate test cases."
  },
  {
    "heading": "Running Test Cases:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#running-test-cases",
    "body": "Run Keploy server to expose test APIs:\nGenerated test cases can be found inside the Keploy directory."
  },
  {
    "heading": "5. Setup Keploy using Binary:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#5-setup-keploy-using-binary",
    "body": ""
  },
  {
    "heading": "Generate Keploy Binary:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#generate-keploy-binary",
    "body": ""
  },
  {
    "heading": "Capturing Test Cases:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#capturing-test-cases-1",
    "body": ""
  },
  {
    "heading": "Running Test Cases:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#running-test-cases-1",
    "body": "Note: Use the --debug flag to run Keploy in debug mode for detailed logs."
  },
  {
    "heading": "6. Setup Keploy via Docker:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#6-setup-keploy-via-docker",
    "body": ""
  },
  {
    "heading": "Install the Keploy Docker Image:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#install-the-keploy-docker-image",
    "body": ""
  },
  {
    "heading": "Create Keploy Alias:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#create-keploy-alias",
    "body": ""
  },
  {
    "heading": "Capture Test Cases:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#capture-test-cases",
    "body": ""
  },
  {
    "heading": "Running Test Cases:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#running-test-cases-2",
    "body": ""
  },
  {
    "heading": "7. Testing Locally Built Docker Image:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#7-testing-locally-built-docker-image",
    "body": ""
  },
  {
    "heading": "Build Docker Image:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#build-docker-image",
    "body": "Run the below command inside the keploy respository and make sure there is no directory by the name of keploy inside the main keploy repository."
  },
  {
    "heading": "Create Alias:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#create-alias",
    "body": ""
  },
  {
    "heading": "Remember setting up the Keploy binary. See Setup Keploy using Binary for details.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#5-setup-keploy-using-binary",
    "body": ""
  },
  {
    "heading": "Capture Test Cases:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#capture-test-cases-1",
    "body": ""
  },
  {
    "heading": "Running Test Cases:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#running-test-cases-3",
    "body": "There you have it! With this guide, you're all set to dive into Keploy development. Happy testing! üß™üîçüíª\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/contribution-guide/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Keploy Installation‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "üõ†Ô∏è Platform-Specific Requirements for Keploy‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#Ô∏è-platform-specific-requirements-for-keploy",
    "body": "Below is a table summarizing the tools needed for both native and Docker installations of Keploy on MacOS, Windows, and\nLinux:\nOn MacOS and Windows, additional tools are required for Keploy due to the lack of native eBPF support."
  },
  {
    "heading": "Keploy Installation‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#keploy-installation",
    "body": ""
  },
  {
    "heading": "Quick Installation Using CLI‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#quick-installation-using-cli",
    "body": "Let's get started by setting up the Keploy alias with this command:\nYou should see something like this:\nüéâ Wohoo! You are all set to use Keploy."
  },
  {
    "heading": "Other Installation Methods‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#other-installation-methods",
    "body": ""
  },
  {
    "heading": "Downloading and running Keploy in Docker‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#downloading-and-running-keploy-in-docker",
    "body": ""
  },
  {
    "heading": "On macOS‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#on-macos",
    "body": "Note : Keploy is not supported natively on MacOS, so you can follow the below method to run with docker"
  },
  {
    "heading": "Downloading and running Keploy in Native‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#downloading-and-running-keploy-in-native",
    "body": "Prequisites:"
  },
  {
    "heading": "On WSL/Linux AMD‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#on-wsllinux-amd",
    "body": ""
  },
  {
    "heading": "On WSL/Linux ARM‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#on-wsllinux-arm",
    "body": ""
  },
  {
    "heading": "Setting up the Docker Desktop for WSL 2‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#setting-up-the-docker-desktop-for-wsl-2",
    "body": "When developing on Windows with Docker Desktop and WSL 2, it's crucial to configure Docker Desktop to allow WSL 2 distributions to access the Docker daemon. This setup enables seamless integration between your Windows environment, WSL 2 Linux distros, and Docker.\nBy default, Docker Desktop may not be configured to work with all WSL 2 distros out of the box. Proper configuration ensures that you can run Docker commands from within your WSL 2 environment, allowing for a more native Linux development experience while leveraging the power of Windows."
  },
  {
    "heading": "With Arkade‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#with-arkade",
    "body": "Or you can also download specific version of Keploy using the following command:"
  },
  {
    "heading": "üé¨ Capturing Testcases‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#-capturing-testcases",
    "body": "To initiate the recording of API calls, execute this command in your terminal:\nFor example, if you're using a simple Golang program, the CMD_TO_RUN_APP would resemble:"
  },
  {
    "heading": "üèÉ Running Testcases‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#-running-testcases",
    "body": "To run the testcases and see if there are any regressions introduced, use this terminal command:\nExplore the Test Coverage Generation Guide for seeing test-coverage with your unit testing library and Keploy Running Guide for additional options and tips on customizing your Keploy setup to perfection."
  },
  {
    "heading": "Introduction to Keploy (v1.0.0)‚Äã",
    "url": "http://localhost:3000/docs/1.0.0/keploy-explained/introduction/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Keploy Features‚Äã",
    "url": "http://localhost:3000/docs/1.0.0/keploy-explained/introduction/",
    "link": "#keploy-features",
    "body": ""
  },
  {
    "heading": "1. Convert API calls from anywhere to Test-Case‚Äã",
    "url": "http://localhost:3000/docs/1.0.0/keploy-explained/introduction/",
    "link": "#1-convert-api-calls-from-anywhere-to-test-case",
    "body": "Keploy captures all the API calls and subsequent network traffic served by the application. You can use any existing API management tools like Postman, Hoppscotch, Curl to generate test-case."
  },
  {
    "heading": "2. Automatically mock Mutations‚Äã",
    "url": "http://localhost:3000/docs/1.0.0/keploy-explained/introduction/",
    "link": "#2-automatically-mock-mutations",
    "body": "Keploy automatically mocks network/external dependencies for all CRUD operations with correct responses.\nData dumps, stubs or mocks for dependencies like DBs, internal services, or third party services like twilio, shopify or stripe are not required.\nPlease check list of currently supported dependencies in Go, Java and Node.\nKeploy can safely replay writes or mutations by capturing from local or other environments and replaying without API chaining.\nIdempotency guarantees are also not required in the application. Multiple Reads after write operations can be replicated automatically too."
  },
  {
    "heading": "3. Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/1.0.0/keploy-explained/introduction/",
    "link": "#3-accurate-noise-detection",
    "body": "Keploy identifies noisy fields in the responses accurately like (timestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy then compares if the responses of the API requests disagree with each other.\nIf any of the fields of the API responses are different they are marked as random/non-deterministic fields."
  },
  {
    "heading": "4. Native interoperability‚Äã",
    "url": "http://localhost:3000/docs/1.0.0/keploy-explained/introduction/",
    "link": "#4-native-interoperability",
    "body": "Keploy has native integrations with popular testing libraries like go-test, jUnit, jest.\nCode coverage will be reported with existing and Keploy recorded test cases and can also be integrated in\nexisting CI pipelines easily."
  },
  {
    "heading": "5. Easy Integration Framework for new Libraries‚Äã",
    "url": "http://localhost:3000/docs/1.0.0/keploy-explained/introduction/",
    "link": "#5-easy-integration-framework-for-new-libraries",
    "body": "Keploy has Instrumentation/Integration framework to easily add the new libraries/drivers within ~100 lines of code.\nPlease check-out the contribution guide."
  },
  {
    "heading": "Keploy SDK‚Äã",
    "url": "http://localhost:3000/docs/1.0.0/keploy-explained/introduction/",
    "link": "#keploy-sdk",
    "body": "A Keploy SDK is a language-specific library that offers APIs to do the following:\nComparing the expected and actual responses for an API call happens at the Keploy Server.\nA Keploy SDK mocks the external dependencies while testing APIs, eliminating the need to setup test-environment.\nThis allows the application to isolate itself from external dependencies."
  },
  {
    "heading": "Integrate SDK‚Äã",
    "url": "http://localhost:3000/docs/1.0.0/keploy-explained/introduction/",
    "link": "#integrate-sdk",
    "body": "Choose programming language to integrate Keploy SDK."
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "How Keploy Works?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "üåü Keploy V2 Architecture üåü‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-keploy-v2-architecture-",
    "body": ""
  },
  {
    "heading": "üéØ Goals‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-goals",
    "body": ""
  },
  {
    "heading": "üèó High-level architecture‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-high-level-architecture",
    "body": "Keploy uses eBPF to instrument applications without code changes. Key components include:"
  },
  {
    "heading": "ü™ù eBPF hooks loader‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-ebpf-hooks-loader",
    "body": "The eBPF hooks loader handles the Ingress and Egress Interceptor logic."
  },
  {
    "heading": "üåê Network Proxy‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-network-proxy",
    "body": "The Network Proxy acts as a transparent proxy for recording or mocking outgoing network calls. It processes TCP streams, matching the protocol and using the appropriate integration packages."
  },
  {
    "heading": "üñ• API server‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-api-server",
    "body": "The API server manages commands for start/stop and resource management (e.g., testicles, stubs). It's evolving to enable full agent mode, beyond just CLI."
  },
  {
    "heading": "üß™ Example‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-example",
    "body": "Consider an application server serving HTTP APIs for clients like web/mobile apps, postman, or curl, and depending on a database and another API.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Why Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/why-keploy/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Join the Keploy adventure!‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/why-keploy/",
    "link": "#join-the-keploy-adventure",
    "body": "‚≠ê If you're excited about what's coming, show some love by starring Keploy on GitHub\nü§ô We're happy to hear from you in-case you want to deep-dive. Schedule a demo ‚Äì because the best tests are yet to come! üöÄüéâ"
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/why-keploy/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "About the Event‚Äã",
    "url": "http://localhost:3000/docs/hacktoberfest/contribution-guide/",
    "link": "#about-the-event",
    "body": ""
  },
  {
    "heading": "Celebrate Open Source with Hacktoberfest‚Äã",
    "url": "http://localhost:3000/docs/hacktoberfest/contribution-guide/",
    "link": "#celebrate-open-source-with-hacktoberfest",
    "body": "Hacktoberfest'24 is a month-long celebration of open-source software run by DigitalOcean. Hacktoberfest is open to everyone, from first-time contributors to seasoned open-source developers.\nYour open-source journey begins with a pull request."
  },
  {
    "heading": "Hacktoberfest Journey with Keploy‚Äã",
    "url": "http://localhost:3000/docs/hacktoberfest/contribution-guide/",
    "link": "#hacktoberfest-journey-with-keploy",
    "body": "If you‚Äôve ever wanted to contribute to open source, now is your chance! You can contribute to several Keploy projects participating this year‚Äôs Hacktoberfest.\nAnyone around the globe who desires to help drive the growth of open source and make positive contributions to an ever-growing community. All backgrounds and skill levels are encouraged to participate."
  },
  {
    "heading": "Code Contributribution to Keploy Projects includes:‚Äã",
    "url": "http://localhost:3000/docs/hacktoberfest/contribution-guide/",
    "link": "#code-contributribution-to-keploy-projects-includes",
    "body": ""
  },
  {
    "heading": "Non-code contributions include:‚Äã",
    "url": "http://localhost:3000/docs/hacktoberfest/contribution-guide/",
    "link": "#non-code-contributions-include",
    "body": ""
  },
  {
    "heading": "Code Contribution to Keploy Projects‚Äã",
    "url": "http://localhost:3000/docs/hacktoberfest/code-contribution/",
    "link": "#code-contribution-to-keploy-projects",
    "body": ""
  },
  {
    "heading": "Non-Code Contributions to Keploy‚Äã",
    "url": "http://localhost:3000/docs/hacktoberfest/no-code-contribution/",
    "link": "#non-code-contributions-to-keploy",
    "body": ""
  },
  {
    "heading": "Keploy Installation‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "üõ†Ô∏è Platform-Specific Requirements for Keploy‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#Ô∏è-platform-specific-requirements-for-keploy",
    "body": "Below is a table summarizing the tools needed for both native and Docker installations of Keploy on MacOS, Windows, and\nLinux:\nOn MacOS and Windows, additional tools are required for Keploy due to the lack of native eBPF support."
  },
  {
    "heading": "Keploy Installation‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#keploy-installation",
    "body": ""
  },
  {
    "heading": "Quick Installation Using CLI‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#quick-installation-using-cli",
    "body": "Let's get started by setting up the Keploy alias with this command:\nYou should see something like this:\nüéâ Wohoo! You are all set to use Keploy."
  },
  {
    "heading": "Other Installation Methods‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#other-installation-methods",
    "body": ""
  },
  {
    "heading": "Downloading and running Keploy in Docker‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#downloading-and-running-keploy-in-docker",
    "body": ""
  },
  {
    "heading": "On macOS‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#on-macos",
    "body": "Note : Keploy is not supported natively on MacOS, so you can follow the below method to run with docker"
  },
  {
    "heading": "Downloading and running Keploy in Native‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#downloading-and-running-keploy-in-native",
    "body": "Prequisites:"
  },
  {
    "heading": "On WSL/Linux AMD‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#on-wsllinux-amd",
    "body": ""
  },
  {
    "heading": "On WSL/Linux ARM‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#on-wsllinux-arm",
    "body": ""
  },
  {
    "heading": "Setting up the Docker Desktop for WSL 2‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#setting-up-the-docker-desktop-for-wsl-2",
    "body": "When developing on Windows with Docker Desktop and WSL 2, it's crucial to configure Docker Desktop to allow WSL 2 distributions to access the Docker daemon. This setup enables seamless integration between your Windows environment, WSL 2 Linux distros, and Docker.\nBy default, Docker Desktop may not be configured to work with all WSL 2 distros out of the box. Proper configuration ensures that you can run Docker commands from within your WSL 2 environment, allowing for a more native Linux development experience while leveraging the power of Windows."
  },
  {
    "heading": "With Arkade‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#with-arkade",
    "body": "Or you can also download specific version of Keploy using the following command:"
  },
  {
    "heading": "üé¨ Capturing Testcases‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#-capturing-testcases",
    "body": "To initiate the recording of API calls, execute this command in your terminal:\nFor example, if you're using a simple Golang program, the CMD_TO_RUN_APP would resemble:"
  },
  {
    "heading": "üèÉ Running Testcases‚Äã",
    "url": "http://localhost:3000/docs/server/installation/",
    "link": "#-running-testcases",
    "body": "To run the testcases and see if there are any regressions introduced, use this terminal command:\nExplore the Test Coverage Generation Guide for seeing test-coverage with your unit testing library and Keploy Running Guide for additional options and tips on customizing your Keploy setup to perfection."
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Keploy CLI Commands‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/cli-commands/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Usage‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/cli-commands/",
    "link": "#usage",
    "body": "You can use --help, -h flag for all the commands to see available flag options and their purpose."
  },
  {
    "heading": "Modes and Flags‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/cli-commands/",
    "link": "#modes-and-flags",
    "body": "Here are some examples of how to use some common flags:"
  },
  {
    "heading": "record‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/cli-commands/",
    "link": "#record",
    "body": "The record mode in Keploy allows the user to record Keploy testcases from the API calls. The recorded testcases and generated mocks are then saved in the keploy directory in the current working directory."
  },
  {
    "heading": "test‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/cli-commands/",
    "link": "#test",
    "body": "The test mode in Keploy allows the user to run the recoded testcases from the API calls and execute assertion. A detailed report is produced after the tests are executed and it's then saved in the yaml format in keploy/reports directory in the current working directory."
  },
  {
    "heading": "gen‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/cli-commands/",
    "link": "#gen",
    "body": "The gen cmd in Keploy allows user to generate unit tests using LLM Models."
  },
  {
    "heading": "normalize‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/cli-commands/",
    "link": "#normalize",
    "body": "The normalize cmd in Keploy allows user to change the response of the testcases according to the latest test run response that is executed by the user, this is useful when the API response of the testcases are changed due to code change or any other intentional change in the application."
  },
  {
    "heading": "rerecord‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/cli-commands/",
    "link": "#rerecord",
    "body": "The rerecordcmd allow user to record new keploy testcases/mocks from the existing test cases for the given testset(s)"
  },
  {
    "heading": "templatize‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/cli-commands/",
    "link": "#templatize",
    "body": "The templatize cmd allows the user to templatize important fields in the testcases who's values are used in the request of testcases and that may change in the future."
  },
  {
    "heading": "config‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/cli-commands/",
    "link": "#config",
    "body": "The config command in Keploy is used to generate the Keploy Configuration File i.e. keploy.yaml. The generated configuration file is created in the current working directory."
  },
  {
    "heading": "example‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/cli-commands/",
    "link": "#example",
    "body": "The example command in Keploy is designed to illustrate the usage of Keploy in various scenarios, showing its capabilities with different types of applications and setups. Below are examples for using Keploy with Golang, Node.js, Java, and Docker applications."
  },
  {
    "heading": "Keploy Unit Test Generator‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/unit-test-generator/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Usage‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/unit-test-generator/",
    "link": "#usage",
    "body": ""
  },
  {
    "heading": "Prerequisites‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/unit-test-generator/",
    "link": "#prerequisites",
    "body": "API KEY of the AI model is needed, this can be from either of one these:\nNow, let's setup the API_KEY as environment variable : -"
  },
  {
    "heading": "Running with Javascript/TypeScript applications‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/unit-test-generator/",
    "link": "#running-with-javascripttypescript-applications",
    "body": "For the we need to make sure that the coverage report is in coberuta format, so to make sure let's modify our package.json by adding :\nor if jest.config.js is present then, we need to add :"
  },
  {
    "heading": "Generating Unit Tests‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/unit-test-generator/",
    "link": "#generating-unit-tests",
    "body": "You can test a smaller section of application or to control costs, we can consider generating tests for a single source and its corresponding test file : -\nFor Entire Application we can generate tests by using --test-dir instead of --test-file-path."
  },
  {
    "heading": "Example‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/unit-test-generator/",
    "link": "#example",
    "body": "Let us consider the express-mongoose sample-application, where we have a jest testcases under test folder with name routes.test.js.\nWe have modified our package.json by adding below : -\nNow let's run Keploy UTG command : -\nWe will get following output : -\nVoila!! The Generated Testcases have provided with 58% coverageüåü"
  },
  {
    "heading": "Running with Golang applications‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/unit-test-generator/",
    "link": "#running-with-golang-applications",
    "body": "To ensure Cobertura formatted coverage reports, we need to install the following : -"
  },
  {
    "heading": "Generating Unit Tests‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/unit-test-generator/",
    "link": "#generating-unit-tests-1",
    "body": "With the above dependecies installed, we can now generate tests for our application by the following dommand : -\nFor Entire Application we can generate tests by using --test-dir instead of --test-file-path."
  },
  {
    "heading": "Example‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/unit-test-generator/",
    "link": "#example-1",
    "body": "Let us consider the mux-sql sample-application, where we already have our app_test.go test file for app.go source file : -\nWe will get following output : -\nVoila!! The Generated Testcases have provided with 71% coverage in just 2 iterations üåü"
  },
  {
    "heading": "Frequently Asked Questions(FAQs)‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/unit-test-generator/",
    "link": "#frequently-asked-questionsfaqs",
    "body": ""
  },
  {
    "heading": "Rename Default Test-names‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/rename-testcases/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Rename Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/rename-testcases/",
    "link": "#rename-test-cases",
    "body": "To name your test case, make an API call and add a header field whose key is set to Keploy-Test-Name and value is set to the name you want for your test case."
  },
  {
    "heading": "Example‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/rename-testcases/",
    "link": "#example",
    "body": "To demonstrate this, let's consider the gin-mongo sample application."
  },
  {
    "heading": "Rename Test-Sets‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/rename-testcases/",
    "link": "#rename-test-sets",
    "body": "To rename your test set, you can manually override the default name from test-set-0 to a kTest-0 in the keploy folder."
  },
  {
    "heading": "TLS Docker Support‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/docker-tls/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Recording Testcases and Data Mocks ‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/docker-tls/",
    "link": "#recording-testcases-and-data-mocks-",
    "body": "To capture test cases, Execute the following command within your application's root directory.\nPerform API calls using tools like Hoppscotch, Postman, or cURL commands.\nKeploy will capture the API calls you've conducted, generating test suites comprising test cases (KTests) and data mocks (KMocks) in YAML format."
  },
  {
    "heading": "Running Testcases‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/docker-tls/",
    "link": "#running-testcases",
    "body": "To execute the test cases, follow these steps in the root directory of your application.\nWhen using docker-compose to start the application, it's important to ensure that the --container-name parameter matches the container name in your docker-compose.yaml file.\nVoil√†! üßëüèª‚Äçüíª We have the tests with data mocks running! üê∞üéâ\nYou'll be able to see the test cases that ran with the results report on the console as well as locally in the testReport directory."
  },
  {
    "heading": "Configuration File‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Introduction‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#introduction",
    "body": "Tired of specifying the same container name, app command, or delay, filters for each record or test command? üò¥\nIntroducing Keploy-config üéâ - It is a YAML-based file that will allow you to define the testing configurations, including container setups, delays, and any other relevant parameters."
  },
  {
    "heading": "Getting Started:‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#getting-started",
    "body": "We will be using a sample app to demonstrate working of Keploy configuration file.\nTo generate a keploy-config file, run:\nFor demonstration purposes, we are using the root directory of the echo-sql application. We can place it wherever we want to inside the project.\nAfter successful execution of the command, a default initialized config file named as keploy.yaml has been created with the content as shown below:"
  },
  {
    "heading": "Using the Config File‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#using-the-config-file",
    "body": "The Keploy-config file eliminates the need to repeatedly specify parameters for each record or test command. The parameters in the file correspond to the flags in the Keploy CLI Command Docs.Using keploy-config can help to reduce the record and test command to just:"
  },
  {
    "heading": "Record Command:‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#record-command",
    "body": ""
  },
  {
    "heading": "Test Command:‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#test-command",
    "body": "Visit the CLI Command Docs to know more about the flags/parameters and their usage."
  },
  {
    "heading": "Configuration Sections‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#configuration-sections",
    "body": ""
  },
  {
    "heading": "Record Section‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#record-section",
    "body": "The record section in the Keploy-config file allows you to define parameters for recording API calls."
  },
  {
    "heading": "Test Section‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#test-section",
    "body": "The test section in the Keploy-config file allows you to define parameters for testing API calls.\nThe tests section in the Keploy-config file allows you to define parameters for recording test scenarios during API calls.\nThe tests section enables you to specify conditions for recording tests during API calls. The filters subsection allows you to define specific criteria, such as path, HTTP methods, headers, and host, to record relevant test scenarios."
  },
  {
    "heading": "Using Test Filters Together or Independently‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#using-test-filters-together-or-independently",
    "body": "You can use the path, urlMethods, headers, and host filters together or independently based on your testing scenarios. This flexibility allows you to precisely define the conditions under which tests are recorded."
  },
  {
    "heading": "Bypass Rules Section‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#bypass-rules-section",
    "body": "The bypassRules section in the Keploy-config file allows you to define parameters for bypassing and mocking API calls.\nExample:\nThe bypassRules section provides a way to bypass and mock API calls during testing. The filters subsection allows you to define specific conditions for applying stubs, such as path, port, and host. You can use these filters together or independently based on your testing scenarios.\nIn the provided example:"
  },
  {
    "heading": "Advanced Noise Filtering:‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#advanced-noise-filtering",
    "body": "Earlier the only way to add the noisy fields was by modifying individual test file (testcase level). Now, With the introduction of config file, users can add the noisy fields at test-set and global level through config file itself."
  },
  {
    "heading": "Global Noise‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#global-noise",
    "body": "The global subsection of globalNoise is used to define parameters that are globally ignored for all API calls during testing. It enables you to filter out consistent noise, ensuring a cleaner evaluation of responses."
  },
  {
    "heading": "Test-Set Noise‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#test-set-noise",
    "body": "Under the test-sets subsection of globalNoise, you can define noise parameters specific to a particular test set. This ensures that certain noise is only ignored for the API calls associated with that specific test set.\ntest-set-1:"
  },
  {
    "heading": "Handling Deeply Nested JSON Fields in Keploy Configuration üß©‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#handling-deeply-nested-json-fields-in-keploy-configuration-",
    "body": "When dealing with deeply nested JSON fields in the response body, it‚Äôs important to correctly specify the path to the fields in the Keploy configuration file. Here‚Äôs an example to illustrate how to add a nested token field to the global noise configuration."
  },
  {
    "heading": "Example JSON Response üìÑ‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#example-json-response-",
    "body": "Consider the following JSON response:"
  },
  {
    "heading": "Adding Nested Fields to the Configuration ‚öôÔ∏è‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#adding-nested-fields-to-the-configuration-Ô∏è",
    "body": "To add the token field inside the signUp object in the global noise configuration, you need to specify the complete path to the field.\nIn this example:\nBy specifying the path in this manner, Keploy will correctly identify and handle these deeply nested fields in the configuration."
  },
  {
    "heading": "Note:‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#note",
    "body": "The globalNoise and test-sets are optional fields in the config file. If not specified, the default value for both fields is an empty object {}. This flexibility allows you to seamlessly integrate advanced noise filtering based on your testing requirements."
  },
  {
    "heading": "Conclusion‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/configuration-file/",
    "link": "#conclusion",
    "body": "Congratulations! You've now explored the features and configuration options provided by Keploy-config.\nNow armed with Keploy-config, you are ready to embark on a more organized and productive journey of recording and testing APIs with Keploy. Feel free to explore additional features, customize configurations, and refer to the CLI Command Docs for more details on available flags and parameters.\nHappy testing and may your APIs always return the expected results! üöÄ"
  },
  {
    "heading": "Adding a custom Mock to the Keploy Mock File‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/custom-mocks/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Mocks Schema‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/custom-mocks/",
    "link": "#mocks-schema",
    "body": ""
  },
  {
    "heading": "Field Descriptions‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/custom-mocks/",
    "link": "#field-descriptions",
    "body": ""
  },
  {
    "heading": "Guidelines for Adding a Mock‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/custom-mocks/",
    "link": "#guidelines-for-adding-a-mock",
    "body": ""
  },
  {
    "heading": "Example‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/custom-mocks/",
    "link": "#example",
    "body": ""
  },
  {
    "heading": "Keploy Templatize‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/keploy-templatize/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Keploy Templatize Example‚Äã",
    "url": "http://localhost:3000/docs/running-keploy/keploy-templatize/",
    "link": "#keploy-templatize-example",
    "body": "You can use the following command to templatize your testsets.\nBy default, it templatizes all the testsets in the keploy folder. If you want to templatize a particular testset, you can pass the testset flag like"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Integrating with GitHub CI‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/github/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Shell Scripts‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/github/",
    "link": "#shell-scripts",
    "body": "GitHub scripts are the easiest way to integrate Keploy with GitHub. We will be using express-mongoose sample-application for the example. You can either add the following script to yout github workflow or create a new worflow .github/workflows/keploy-test.yml:-\ncurl --silent --location \"https://github.com/keploy/keploy/releases/latest/download/keploy_linux_arm64.tar.gz\" | tar xz --overwrite -C /tmp"
  },
  {
    "heading": "Example with Scripts‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/github/",
    "link": "#example-with-scripts",
    "body": "While using express-mongoose sample-application with keploy test in GitHub CI, the workflow would like:-\nWe will get to see output : -\nAnd... voila! You have successfully integrated keploy in GitHub CI pipeline üåü"
  },
  {
    "heading": "GitHub Actions‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/github/",
    "link": "#github-actions",
    "body": "GitHub Actions are a more advanced way to integrate Keploy with GitHub. We will be using express-mongoose sample-application for the example. Create a new workflow unde .github/workflow with the name keploy-test.yml: -\nGitHub Actions are a more advanced way to integrate Keploy with GitHub. We will be using express-mongoose sample-application for the example. Create a new workflow unde .github/workflow with the name keploy-test.yml: -\nIn the above example, we are using the keploy/testgpt action to run the test cases."
  },
  {
    "heading": "Example with Actions‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/github/",
    "link": "#example-with-actions",
    "body": "While using express-mongoose sample-application with keploy test in GitHub CI via actions, the workflow would like:-\nWe will get to see output : -\nAnd... voila! You have successfully integrated keploy in GitHub CI pipeline üåü\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/github/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Integrating with GitLab CI‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/gitlab/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Create pipeline‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/gitlab/",
    "link": "#create-pipeline",
    "body": "To integrate the Keploy in GitLab, we first need to install and setup by adding the following steps to our .gitlab-ci.yml : -\ncurl --silent --location \"https://github.com/keploy/keploy/releases/latest/download/keploy_linux_arm64.tar.gz\" | tar xz --overwrite -C /tmp\nNow that we have Keploy installed, and all ready, we need switch to path where keploy folder is present in our application and install all the application related dependencies. Since we are using express-mongoose sample-application, steps in our script: would look like below:-\nIn your .gitlab-ci.yml file, in last step we have keploy test command to run your keploy generated test suite, this sets up Keploy to replay the interactions it has generated and perform CI Testing.\nWe will get to see output : -\nAnd... voila! You have successfully integrated keploy in GitLab CI/CD pipeline üåü\nIntegrating Keploy with GitLab CI automates the testing process, ensuring that tests are run with every commit and merge request. And by running tests automatically in CI pipeline, you can catch issues early and ensure that your application remains stable and reliable.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/gitlab/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Integrating with Jenkins‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/jenkins/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Prerequisites‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/jenkins/",
    "link": "#prerequisites",
    "body": "Open terminal and runsudo visudo command to open the sudoers file and add the below line at the end of the file."
  },
  {
    "heading": "Create a Pipeline‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/jenkins/",
    "link": "#create-a-pipeline",
    "body": "Use the below template to create a Pipeline via script : -\ncurl --silent --location \"https://github.com/keploy/keploy/releases/latest/download/keploy_linux_arm64.tar.gz\" | tar xz --overwrite -C /tmp"
  },
  {
    "heading": "Example‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/jenkins/",
    "link": "#example",
    "body": "Now that we have Keploy installed, and all ready, we need switch to path where keploy folder is present in our application and install all the application related dependencies. Since we are using express-mongoose sample-application, steps in our script would look like below:-\nWe would output something like below:-\nAnd... voila! You have successfully integrated keploy in Jenkins CI/CD pipeline üåü\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/ci-cd/jenkins/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Merge Unit Test Coverage Data‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/go/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "üõ†Ô∏è Language Specific Requirements‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/go/",
    "link": "#Ô∏è-language-specific-requirements",
    "body": ""
  },
  {
    "heading": "Graceful Shutdown‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/go/",
    "link": "#graceful-shutdown",
    "body": "It is important that the application is shutdown gracefully. In case of Golang, function for graceful shutdown:"
  },
  {
    "heading": "Usage‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/go/",
    "link": "#usage",
    "body": "For keploy test coverage the binary must built with -cover flag:\nTo get the coverage data for unit tests :\nTo merge coverage data of unit tests with Keploy provided coverage :\nTo get the coverage related information for merged coverage data :"
  },
  {
    "heading": "Merge Unit Test Coverage Data‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/java/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "üõ†Ô∏è Language Specific Requirements‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/java/",
    "link": "#Ô∏è-language-specific-requirements",
    "body": "Note: In case of java application, before running test subcommand, you need to clean the project by removing any previously generated file, and run install command."
  },
  {
    "heading": "Usage‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/java/",
    "link": "#usage",
    "body": ""
  },
  {
    "heading": "Update pom.xml file‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/java/",
    "link": "#update-pomxml-file",
    "body": "You will need to add the following plugins in pom.xml file of your application. :-\nNow, To get the combined report as well as coverage report for your unit tests, Run\nThe html file for unit tests report would be generated in target/site/ut directory and, for combined report it would be generated in target/site/e2e-ut-aggregate directory. Open index.html to visualize the report."
  },
  {
    "heading": "Merge Unit Test Coverage Data‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/javascript/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "üõ†Ô∏è Language Specific Requirements‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/javascript/",
    "link": "#Ô∏è-language-specific-requirements",
    "body": ""
  },
  {
    "heading": "Usage‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/javascript/",
    "link": "#usage",
    "body": ""
  },
  {
    "heading": "Update package file‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/javascript/",
    "link": "#update-package-file",
    "body": "Update the package.json file that runs the application:\nIn test script, --coverage flag would trigger the report generation for jest. For report generation in other testing frameworks like mocha, intern, tap, refer https://istanbul.js.org/docs/tutorials/\nTo generate coverage report for your unit tests, Run:\nTo merge coverage data of unit tests with keploy tests, Run:\nTo get coverage related information for merged coverage data, Run:"
  },
  {
    "heading": "Merge Unit Test Coverage Data‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/python/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Usage‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/python/",
    "link": "#usage",
    "body": "To get the coverage data for your unit tests:\nHere, test_program.py is the unit test program you want to run, and --data-file is set to .coverage.unit becuase, by default, raw coverage data would be written to .coverage which is where coverage data for keploy tests is present, so to avoid overwritting we pass a new file through data-file flag."
  },
  {
    "heading": "Combine And Get Report‚Äã",
    "url": "http://localhost:3000/docs/server/sdk-installation/python/",
    "link": "#combine-and-get-report",
    "body": "To combine the coverage from the unit tests, and Keploy's API tests we can use the command below:\nMake sure to run this command before starting a new test run to avoid getting multiple coverage files.\nFinally, to generate the coverage report for the test run, you can run:\nand if you want the coverage in an html file, you can run:"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Keploy Cloud Installation‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/cloud-installation/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Introduction üìò‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/cloud-installation/",
    "link": "#introduction-",
    "body": ""
  },
  {
    "heading": "Welcome to the Keploy Cloud Guide!‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/cloud-installation/",
    "link": "#welcome-to-the-keploy-cloud-guide",
    "body": "In this guide, you will find information about Keploy Cloud, onboarding, features, and how to use them."
  },
  {
    "heading": "Requesting a Keploy Cloud Account‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/cloud-installation/",
    "link": "#requesting-a-keploy-cloud-account",
    "body": "To request a Keploy Cloud account, please complete the request form here. Our team will review your request and get back to you as soon as possible."
  },
  {
    "heading": "Getting Started with Keploy Cloud‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/cloud-installation/",
    "link": "#getting-started-with-keploy-cloud",
    "body": "Once your account is set up, you can start exploring features of Keploy Cloud. Here are some key features to can get started with:\nTo get started with Keploy Cloud, you will need to install the Keploy Cloud Agent and authenticate your account."
  },
  {
    "heading": "üõ†Ô∏è Platform-Specific Requirements for Keploy‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/cloud-installation/",
    "link": "#Ô∏è-platform-specific-requirements-for-keploy",
    "body": "Below is a table summarizing the tools needed for both native and Docker installations of Keploy on MacOS, Windows, and\nLinux:\nOn MacOS and Windows, additional tools are required for Keploy due to the lack of native eBPF support."
  },
  {
    "heading": "Installation üõ†Ô∏è‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/cloud-installation/",
    "link": "#installation-Ô∏è",
    "body": "Install and Validate the Keploy Cloud Agent by following the steps below:\nEnter your API Key when prompted, ask your org Admin to re-regenerate the API key in case you lose it.\nOnce validated, you can start using Keploy Cloud to record-test."
  },
  {
    "heading": "Need Help?‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/cloud-installation/",
    "link": "#need-help",
    "body": "If you have any questions or need assistance, our support team is here to help. You can reach out to us through our support portal, Slack or by emailing us at hello[at]keploy.io."
  },
  {
    "heading": "Time Freezing‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/time-freezing/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Why Time Freezing? ‚ùÑÔ∏è‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/time-freezing/",
    "link": "#why-time-freezing-Ô∏è",
    "body": "While making tests, time-sensitive objects like JWT tokens are a challenge as they expire, leading to test failures. This increases the maintenance effort of test suites and also impacts reliability."
  },
  {
    "heading": "What is Time Freezing? ‚è≥‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/time-freezing/",
    "link": "#what-is-time-freezing-",
    "body": "With Keploy Cloud users will be able to freeze/rollback the time in every test run, back to when the test case was recorded.\nThis allows developers to ensure time-sensitive objects don‚Äôt expire or change, making tests consistent and more reliable."
  },
  {
    "heading": "Usage üõ†Ô∏è‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/time-freezing/",
    "link": "#usage-Ô∏è",
    "body": ""
  },
  {
    "heading": "Running on Linux or Windows(WSL) üêßüíª‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/time-freezing/",
    "link": "#running-on-linux-or-windowswsl-",
    "body": "For native Linux, Windows(WSL) environments, simply add the --freezeTime flag when running your tests, like so:\nVoila! Your tests will now run with time freezing enabled."
  },
  {
    "heading": "Running on Docker üê≥‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/time-freezing/",
    "link": "#running-on-docker-",
    "body": "For Docker-based applications, you'll need to make a few adjustments to your Dockerfile to utilize this feature:"
  },
  {
    "heading": "For Golang(Go) Applications -‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/time-freezing/",
    "link": "#for-golanggo-applications--",
    "body": ""
  },
  {
    "heading": "amd64/x86_64 üñ•Ô∏è‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/time-freezing/",
    "link": "#amd64x86_64-Ô∏è",
    "body": "OR"
  },
  {
    "heading": "arm64/aarch64 üì±‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/time-freezing/",
    "link": "#arm64aarch64-",
    "body": "Voila! Your tests will now run with time freezing enabled."
  },
  {
    "heading": "For Node/Java/Python Applications -‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/time-freezing/",
    "link": "#for-nodejavapython-applications--",
    "body": ""
  },
  {
    "heading": "amd64/x86_64 üñ•Ô∏è‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/time-freezing/",
    "link": "#amd64x86_64-Ô∏è-1",
    "body": "OR"
  },
  {
    "heading": "arm64/aarch64 üì±‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/time-freezing/",
    "link": "#arm64aarch64--1",
    "body": "Voila! Your tests will now run with time freezing enabled."
  },
  {
    "heading": "Mock Registry‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Usage üõ†Ô∏è‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#usage-Ô∏è",
    "body": ""
  },
  {
    "heading": "Disabling Mock Upload‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#disabling-mock-upload",
    "body": "Mock are uploaded to cloud by default and can be disabled using CLI or keploy config."
  },
  {
    "heading": "Disable using CLI flag‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#disable-using-cli-flag",
    "body": "To disable mock uploads for a specific test run, use the --disableMockUpload=true flag:"
  },
  {
    "heading": "Disable using keploy config file‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#disable-using-keploy-config-file",
    "body": "Set the mock upload preference in the configuration file to enable or disable mock uploads by default for all test runs:"
  },
  {
    "heading": "Mock Registry Behavior‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#mock-registry-behavior",
    "body": ""
  },
  {
    "heading": "Test Run Passed ‚úÖ‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#test-run-passed-",
    "body": "If test cases pass, mocks are uploaded to the cloud, added to .gitignore, and a config.yml is generated with a unique Mock ID."
  },
  {
    "heading": "TestRun Failed ‚ùå‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#testrun-failed-",
    "body": "If one or more test cases are failed, Mocks would not be uploaded to cloud and config.yml is not generated, but mocks would still be moved to .gitignore."
  },
  {
    "heading": "Local Mock is missing üö´‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#local-mock-is-missing-",
    "body": "If mocks are missing locally, they will be downloaded from the cloud during the test run."
  },
  {
    "heading": "Different Mocks Locally and Cloud üîÑ‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#different-mocks-locally-and-cloud-",
    "body": "If mocks present locally and in the cloud are different, mocks from the cloud will be downloaded and used during the test run."
  },
  {
    "heading": "Upload Updated Mocks üì§‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#upload-updated-mocks-",
    "body": "To update mocks in the cloud, delete the config.yml under the test set folder. When tests are run, a new config file will be generated, and updated mocks will be uploaded to the cloud."
  },
  {
    "heading": "If using --removeUnuseMocks üßπ‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#if-using---removeunusemocks-",
    "body": "When --removeUnusedMocks is used, config.yml will be updated with a new Mock ID, and those mocks will be treated as new mocks."
  },
  {
    "heading": "Public and Private Mocks üîí‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#public-and-private-mocks-",
    "body": "Mocks can be classified as public or private based on their usage and accessibility:"
  },
  {
    "heading": "Public Mocks üåê‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#public-mocks-",
    "body": "Public mocks are accessible by all users and can be shared across multiple projects. Use public mocks when the data is generic and not sensitive."
  },
  {
    "heading": "Private Mocks üîê‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/mock-registry/",
    "link": "#private-mocks-",
    "body": "Private mocks are restricted to specific users or projects. Use private mocks for sensitive or project-specific data to ensure security and privacy."
  },
  {
    "heading": "Keploy Console üìò‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/keploy-console/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Pre-requisite üìù‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/keploy-console/",
    "link": "#pre-requisite-",
    "body": "Ensure you have installed keploy enterprise."
  },
  {
    "heading": "Run Tests Locally ‚åõÔ∏è‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/keploy-console/",
    "link": "#run-tests-locally-Ô∏è",
    "body": "Before starting the console, run test cases locally.\nLet's see what broke and fix it."
  },
  {
    "heading": "Start Keploy Console üìà‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/keploy-console/",
    "link": "#start-keploy-console-",
    "body": ""
  },
  {
    "heading": "Test Report Operations üõ†Ô∏è‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/keploy-console/",
    "link": "#test-report-operations-Ô∏è",
    "body": "Edit test-cases locally using keploy console."
  },
  {
    "heading": "Add/Remove Noisy Fields‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/keploy-console/",
    "link": "#addremove-noisy-fields",
    "body": "Noisy fields are ignored for assertion when the test-cases runs. Say, Date and Content-Length are two headers that are not static and can change with each request. We can mark these fields as noisy.\nYou'd see the changes in the test-case file locally, new noisy fields are added under noise param in the test case."
  },
  {
    "heading": "Normalise Test Report or Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/keploy-console/",
    "link": "#normalise-test-report-or-test-case",
    "body": "Similarly, if the test case result is the new expected response, we can normalise the test report or a particular test case. This will update the expected result of the test case locally."
  },
  {
    "heading": "Need Help?‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/keploy-console/",
    "link": "#need-help",
    "body": "If you have any questions or need assistance, our support team is here to help. You can reach out to us through our support portal, Slack or by emailing us."
  },
  {
    "heading": "Auto Test Generation üöÄ‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/auto-test-generation/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Usage üõ†Ô∏è‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/auto-test-generation/",
    "link": "#usage-Ô∏è",
    "body": "Keploy can generate tests automatically, with the help of schema file of the application:-"
  },
  {
    "heading": "Example‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/auto-test-generation/",
    "link": "#example",
    "body": "Let's consider the employee-manager application as the example. First we need to create the schema.json file for the app, which would like something:-"
  },
  {
    "heading": "Start Database Instance‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/auto-test-generation/",
    "link": "#start-database-instance",
    "body": "Let's start our postgres database instance via docker:-"
  },
  {
    "heading": "Generate test-cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/auto-test-generation/",
    "link": "#generate-test-cases",
    "body": "Now that we have our schema file, we need to create create jar file since we are using java sample-application :-\nNow that we have our jar file ready, let's start the application with keploy : -\nWe will get similar output: -"
  },
  {
    "heading": "Remove Duplicates Tests üßπ‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/deduplication/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Why Deduplication? ‚ùÑÔ∏è‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/deduplication/",
    "link": "#why-deduplication-Ô∏è",
    "body": "When developing or maintaining a software, it is common for test suites to grow in size. This often results in redundancy, as many test cases cover the same functions or scenarios. This is where Test Deduplication comes into play.\nIt simplifies the testing process by removing redundant test cases, which saves time and resources while keeping the testcases which adds value to the overall coverage of the application."
  },
  {
    "heading": "Usage üõ†Ô∏è‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/deduplication/",
    "link": "#usage-Ô∏è",
    "body": "To detect duplicate tests, simply run the below command, like so:"
  },
  {
    "heading": "For Node Applications‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/deduplication/",
    "link": "#for-node-applications",
    "body": "1. Pre-requsite\nInstall the keploy/sdk and nyc package : -\nAdd the the following on top of your main application js file (index.js/server.js/app.js/main.js) : -\n2. Run Deduplication"
  },
  {
    "heading": "Example‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/deduplication/",
    "link": "#example",
    "body": "Let's use the expresss-mongoose application to test dedup feature. In our src/app.js file we need to have imported and initialized @keploy/sdk package, so now let's run the de-duplication command to check : -\nVoila! Keploy will now detect duplicate tests ."
  },
  {
    "heading": "For Java Applications‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/deduplication/",
    "link": "#for-java-applications",
    "body": "1. Pre-requsite\nPut the latest keploy-sdk in your pom.xml file : -\nNow that we have added keploy-sdk, let's import it in our main class : -\n2. Run Deduplication\nWe need to create Jar file via : -\nOnce we have our jar file ready, we can run following command : -\nVoila! Keploy will now detect duplicate tests ."
  },
  {
    "heading": "For Python Applications‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/deduplication/",
    "link": "#for-python-applications",
    "body": "Deduplication works only on test mode there are no special instructions to record your tests.\n1. Pre-requsite\nPut the latest keploy-sdk in your file : -\nIn your main app file add the following with along with the other imports. And add Keploy's middleware along with the other middlewares for your app based on your framework:\n2. Run Deduplication\nRun keploy with test-sets in which you want to check for the duplicate testcases :"
  },
  {
    "heading": "Example‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/deduplication/",
    "link": "#example-1",
    "body": "Let's use the flask-mongo application to test dedup feature. In our app.py file we need to have imported and initialized keploy package, since this is a flask application we can follow above flask approach. Once we have added package, let's run the de-duplication command to check : -"
  },
  {
    "heading": "Remove Duplicate Tests‚Äã",
    "url": "http://localhost:3000/docs/keploy-cloud/deduplication/",
    "link": "#remove-duplicate-tests",
    "body": "You can simply remove duplicate tests with :"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "MongoDB Support‚Äã",
    "url": "http://localhost:3000/docs/dependencies/mongo/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Introduction‚Äã",
    "url": "http://localhost:3000/docs/dependencies/mongo/",
    "link": "#introduction",
    "body": "The MongoDB Wire Protocol is a simple socket-based, request-response style protocol. Clients communicate with the database server through a regular TCP/IP socket. Clients should connect to the database with a regular TCP/IP socket.\nPort : The default port number for mongod and mongos instances is 27017. The port number for mongod and mongos is configurable and may vary.\nByte Ordering : All integers in the MongoDB wire protocol use little-endian byte order: that is, least-significant byte first.\nMessage Types : MongoDB uses the OP_MSG opcode for both client requests and database replies. There are several message formats used in older versions of MongoDB which have been deprecated in favor of OP_MSG.\nFor more information, check here."
  },
  {
    "heading": "How it works ?‚Äã",
    "url": "http://localhost:3000/docs/dependencies/mongo/",
    "link": "#how-it-works-",
    "body": "When the application sends requests to MongoDB, those requests/responses are in the form of \"wiremessages,\" which are low-level data packets. These wiremessages are intercepted by the Keploy proxy before reaching the actual MongoDB instance.\nOnce intercepted, the proxy's functionality includes parsing these wiremessages, which involves extracting the relevant data and metadata from the packets. After parsing, the extracted information is transformed into a human-readable and editable format. This format could be more user-friendly and easy to understand, making it convenient for developers and administrators to analyze and manipulate the data if necessary. Hence, this proxy serves as an intermediary that captures and mocks the traffic calls.\nThe system is built to support wiremessage MongoDB version => 5.1.X, which refers to the specific version of the communication protocol used between the application and the MongoDB server. This version indicates the specific structure and rules governing the wiremessages exchanged between the two components."
  },
  {
    "heading": "Example of message queries‚Äã",
    "url": "http://localhost:3000/docs/dependencies/mongo/",
    "link": "#example-of-message-queries",
    "body": "In general, each message consists of a standard message header followed by request-specific data. The standard message header is structured as follows:\nOP_MSG is an extensible message format used to encode both client requests and server replies on the wire.\nOP_MSG has the following format:\nNote\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/dependencies/mongo/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "PostgresSQL Support‚Äã",
    "url": "http://localhost:3000/docs/dependencies/postgres/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Introduction‚Äã",
    "url": "http://localhost:3000/docs/dependencies/postgres/",
    "link": "#introduction",
    "body": "The Postgres Wire Protocol is a communication protocol used for client-server interaction in PostgreSQL, allowing clients to communicate with the PostgreSQL database server for executing queries, retrieving results, and performing various database operations.\nPort : The default port number for postgres or pgAdmin instances is 5432. The port number for postgres or pgAdmin is configurable and may vary.\nByte Ordering : All integers in the PostgresQL wire protocol use big-endian byte order: that is, most-significant byte first.\nMessage Types : The PostgreSQL wire protocol uses various message types to facilitate communication between clients and the server. These messages include client-initiated types like StartupMessage for connection initiation, Query for executing SQL commands, and Terminate for ending sessions, as well as server responses like RowDescription for describing result sets, DataRow for transmitting row data, and CommandComplete for signaling query completion. Each message type is identified by a single-byte type code, followed by a length field and message-specific content."
  },
  {
    "heading": "How it works ?‚Äã",
    "url": "http://localhost:3000/docs/dependencies/postgres/",
    "link": "#how-it-works-",
    "body": "Keploy intercepts the traffic and act as a middle to the sourceConnection(client) and destConnection(server). So Keploy acts as destination for the real client and as client for the real destination Connection. So whenever traffic is intercepted keploy gets the byte data and from which we need to ensure the protocol which the connection is using it can be Postgres, mongo etc.. Once keploy identifies it as Postgres keploy send it into the Postgres parser.\nOnce intercepted, the Keploy's functionality includes parsing these wiremessages, which involves extracting the relevant data and metadata from the packets. After parsing, the extracted information is transformed into a human-readable and editable format. This format could be more user-friendly and easy to understand, making it convenient for developers and administrators to analyze and manipulate the data if necessary. Hence, this proxy serves as an intermediary that captures and mocks the traffic calls. Keploy user pgproto3 library as base to store the this data into go structs."
  },
  {
    "heading": "Examples of Message Query‚Äã",
    "url": "http://localhost:3000/docs/dependencies/postgres/",
    "link": "#examples-of-message-query",
    "body": "In general, each message consists of a standard message header followed by request-specific data. Here are the few request (frontend) and response(backend) structs in which the data is saved:\nIn above, backend and frontend are the structs representing PostgreSQL requests and responses : -\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/dependencies/postgres/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "HTTP Support‚Äã",
    "url": "http://localhost:3000/docs/dependencies/http/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Introduction‚Äã",
    "url": "http://localhost:3000/docs/dependencies/http/",
    "link": "#introduction",
    "body": "HTTP (Hypertext Transfer Protocol) Wire Protocol refers to the underlying communication mechanism that enables the transfer of data between a client (such as a web browser) and a server over the internet. It defines how messages are formatted and transmitted, including rules for their semantics, status codes, headers, and other aspects.\nPort : HTTP typically uses port 80 for non-secure connections (HTTP) and port 443 for secure connections (HTTPS). These are default ports, but HTTP servers can technically be configured to listen on any port.\nByte Ordering : It operates at the application layer of the TCP/IP stack, where byte ordering is not a concern. However, if encryption is involved (e.g., HTTPS), then cryptographic algorithms may have specific byte ordering requirements, but this is handled at a lower level than HTTP.\nMessage Types : In the context of HTTP, there are primarily two types of messages:"
  },
  {
    "heading": "How it works ?‚Äã",
    "url": "http://localhost:3000/docs/dependencies/http/",
    "link": "#how-it-works-",
    "body": "The http parser is basically divided into two sections, encode and decode, the encode function is used during the keploy record mode when we need to process the user traffic and store it in mocks and whereas the decode function is used in the test mode when we need to match the mock with the request, decode the information from the mock and write it back to the user.\nSo in the record mode, the encode function is provided with the initial request, which is written to the destination connection and checked if the request is chunked, if it is then parser keeps reading the request from the client connection and write it to the destination connection.\nNext, if the request contains the expect header or not. The expect header is used by a client when sending very large requests. So it is basically used to ask the server if it is ready to accept such a large req or not, if it is, then the server responds with a \"100-continue\" response. This is what we also check by writing the request to the destination connection and reading the respnse from it. We start reading the response and we handle chunking in that case as well. Then finally, keploy parse the request and response to store it in mocks.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/dependencies/http/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Redis Support‚Äã",
    "url": "http://localhost:3000/docs/dependencies/redis/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Introduction‚Äã",
    "url": "http://localhost:3000/docs/dependencies/redis/",
    "link": "#introduction",
    "body": "The Redis wire protocol is a simple, text-based protocol used to communicate with the Redis server over a TCP/IP socket. It follows a request-response model where the client sends a command to the server, and the server responds with a reply.\nPort : The default port for a Redis server is 6379.\nByte Ordering : Redis uses little-endian byte order, particularly in its binary protocol formats like in RDB (Redis Database) and AOF (Append-Only File) persistence formats.\nMessage Types : Redis commands are sent from the client to the server as an array of bulk strings. This is known as the RESP (REdis Serialization Protocol) format. Each command is represented by a list of strings, where the first string is the command name, followed by its arguments.\nFor more information, check here."
  },
  {
    "heading": "How it works ?‚Äã",
    "url": "http://localhost:3000/docs/dependencies/redis/",
    "link": "#how-it-works-",
    "body": ""
  },
  {
    "heading": "Record Mode‚Äã",
    "url": "http://localhost:3000/docs/dependencies/redis/",
    "link": "#record-mode",
    "body": "In record mode, the encode function is utilized. Its primary responsibility is to process incoming user traffic and store this data in mock files. For Redis specifically, the function starts by reading the first 5 bytes of the incoming call to identify the type of call.\nRedis commands are distinguished by specific initial characters such as '+', '-', ':', '$', '*', '_', '#', ',', '(', '!', '=', '%', '~', '>'.\nThe record mode process begins with the RecordOutgoing function, which initiates by reading the initial request from the client. This request is then encoded using the encodeRedis function. This function logs the request, writes it to the destination server, and processes the responses. The responses are read, written back to the client, and stored in the mock files. If there are any remaining responses before reaching the end of the stream, these are also sent to the client and stored."
  },
  {
    "heading": "Test Mode‚Äã",
    "url": "http://localhost:3000/docs/dependencies/redis/",
    "link": "#test-mode",
    "body": "In test mode, the decode function is activated. Its role is to match incoming requests with pre-recorded mocks, decode the necessary information, and write it back to the user.\nThe test mode process starts with the MockOutgoing function, which reads the initial request from the client. The request is then decoded using the decodeRedis function. This function reads the request stream, attempts to match the request with existing mocks using a fuzzy matching algorithm, and retrieves the corresponding responses. If a match is found, the responses are decoded and written back to the client.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/dependencies/redis/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Frequently Asked Questions (FAQ)‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/faq/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "1. Is Keploy a unit testing framework?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/faq/",
    "link": "#1-is-keploy-a-unit-testing-framework",
    "body": "Nope, doesn't replace your trusty unit testing frameworks like go-test, JUnit, Pytest, or Jest. Instead, it teams up with them to make your testing life a breeze, ensuring compatibility with your favorite tools and pipelines."
  },
  {
    "heading": "2. Does Keploy replace unit tests entirely?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/faq/",
    "link": "#2-does-keploy-replace-unit-tests-entirely",
    "body": "Almost! Keploy aims to save you a whopping 80% of the testing effort. While it handles most cases, you might still want to write tests for some methods that aren't API-invokable."
  },
  {
    "heading": "3. What code changes do I need to do?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/faq/",
    "link": "#3-what-code-changes-do-i-need-to-do",
    "body": "Zero, zip, nada! For Golang, Java, Python, and JavaScript applications, Keploy plays nice with your existing codebase, requiring no code changes."
  },
  {
    "heading": "4. How do I run keploy in my CI pipeline?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/faq/",
    "link": "#4-how-do-i-run-keploy-in-my-ci-pipeline",
    "body": "Simple as pie. No need to overhaul your CI pipeline; you can keep using the one that runs your unit tests. Keploy fits right in!"
  },
  {
    "heading": "5. Does Keploy support read after write to DB scenarios?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/faq/",
    "link": "#5-does-keploy-support-read-after-write-to-db-scenarios",
    "body": "Absolutely! Keploy keeps things in order, recording write and read requests in sequence. It expects your application to play by the rules and serves up the same database responses as it did during capture."
  },
  {
    "heading": "6. How does keploy handle fields like timestamps, random numbers (eg: uuids)?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/faq/",
    "link": "#6-how-does-keploy-handle-fields-like-timestamps-random-numbers-eg-uuids",
    "body": "Keploy's got a keen eye for detail. If a request passes its deduplication algorithm, it's game time. Keploy sends a second request with the same parameters to check for differences in responses. Fields like timestamps and UUIDs get the spotlight as they're automatically flagged for comparison. From then on, they're out of the testing picture."
  },
  {
    "heading": "7. Can I use keploy to generate tests from production environments automatically?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/faq/",
    "link": "#7-can-i-use-keploy-to-generate-tests-from-production-environments-automatically",
    "body": "Not just yet, but we're on it! We're cooking up a scalable deduplication algorithm to make it safe for production. If you're itching to explore this frontier, come chat with us on Slack. We'd love to join forces and put our system to the test with your systems."
  },
  {
    "heading": "8. What if my application behaviour changes?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/faq/",
    "link": "#8-what-if-my-application-behaviour-changes",
    "body": "Change is the only constant in the tech world, right? If your app decides to switch things up, your test cases might break. No worries; you can mark the new behavior as normal.\nGot more questions? We're all ears (and code)üëÇ.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/faq/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Welcome to Keploy Documentation! üöÄ",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "This documentation is your roadmap to becoming a Keploy expert, whether you're a seasoned developer or just starting out. üó∫Ô∏è"
  },
  {
    "heading": "What is Keploy? ü§î",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Keploy is your open-source, developer-centric backend testing tool. It makes backend testing easy and productive for engineering teams. Plus, it's easy-to-use, powerful and extensible..üõ†Ô∏è\nKeploy creates test cases and data mocks/stubs from user-traffic by recording API calls and DB queries, significantly speeding up releases and enhancing reliability. üìà"
  },
  {
    "heading": "Contribute through Hacktoberfest ‚úÖ",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "DigitalOcean's Hacktoberfest is a month-long celebration of open-source contributions. Everyone is welcome to participate, regardless of their experience level. Simply make a pull request to an open-source project to get started. You can contribute to several Keploy projects participating this year, If you‚Äôve ever wanted to contribute to open source , now is your chance! Anyone around the globe who desires to help drive the growth of open source and make positive contributions to an ever-growing community. All backgrounds and skill levels are encouraged to participate. Learn How to Contribute?"
  },
  {
    "heading": "Installation Guide üìó",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Let's get Keploy up and running on your Windows, Linux, or macOS machine, so you can start crafting test cases in minutes. ‚è±Ô∏è\n‚ö†Ô∏è Please note that Keploy v2 is currently in development, with the best experience on Linux. Docker support is experimental and may have some limitations for certain use cases."
  },
  {
    "heading": "Supports",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": ""
  },
  {
    "heading": "Languages",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": ""
  },
  {
    "heading": "Dependencies Support",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": ""
  },
  {
    "heading": "Quick Links",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": ""
  },
  {
    "heading": "üê∞ Join Our Community Forum",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Are you curious, ü§î or do you have questions burning in your mind? üî• Look no further! Join our lively Community Forum where you can:\nWe are happy to help you with your üé§ talks, üìù blogposts (whether on our blog or yours) or anything else you want to try. Just get in touch!"
  },
  {
    "heading": "YouTube",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Watch tutorials and meetups with Keploy users."
  },
  {
    "heading": "Meetup",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Join our monthly meetup and ask questions!"
  },
  {
    "heading": "GitHub",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Give Keploy a star on GitHub (it helps!)"
  },
  {
    "heading": "Twitter",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Follow @keployio for Keploy news and events."
  },
  {
    "heading": "Slack",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Join for live conversations and get support."
  },
  {
    "heading": "Blogs",
    "url": "http://localhost:3000/docs/",
    "link": "http://localhost:3000/docs/",
    "body": "Explore blogs on API, Testing, Mocks and Keploy."
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#heading",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#run-tests-with-mocks-anywhere-you-like",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "General Glossary for Users‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#4-interoperability",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "1. API data mocking‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#4-interoperability",
    "link": "#1-api-data-mocking",
    "body": "API mocking is a simulation of real APIs and is performed when the production API is not ready. You may come across a\nsituation where you cannot send an API request to the server because it is not prepared. In such cases, you can mock a\nchunk of data from the response and eventually, when you make requests the mocked data will be returned."
  },
  {
    "heading": "2. Idempotency‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#4-interoperability",
    "link": "#2-idempotency",
    "body": "An API is idempotent when the outcome of a successful request remains unchanged on making the same request frequently."
  },
  {
    "heading": "3. Noisy field‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#4-interoperability",
    "link": "#3-noisy-field",
    "body": "Noisy field refers to the random data whose value changes each time you make a request.\nFor example, a Timestamp is one such property that returns the time when the request is made. Its value is not fed\nmanually but is automatically recorded therefore, at every call it differs."
  },
  {
    "heading": "4. Interoperability‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#4-interoperability",
    "link": "#4-interoperability",
    "body": "Interoperability refers to the situation when the behavior of the data is in its original (native) format when\ntransferred from one platform to other. It reduces the dependency of files by replacing them with optimized code giving\nthe same result."
  },
  {
    "heading": "5. Deduplication Algorithm‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#4-interoperability",
    "link": "#5-deduplication-algorithm",
    "body": "Deduplication is a data compression technique wherein redundant copies of the same data are identified and eliminated.\nThis process involves hash functions or similarity analysis to compare data chunks, enabling the storage system to store\nonly one instance of each unique data segment, thereby optimizing storage efficiency and reducing redundancy."
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "General Glossary for Users‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#1-api-data-mocking",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "1. API data mocking‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#1-api-data-mocking",
    "link": "#1-api-data-mocking",
    "body": "API mocking is a simulation of real APIs and is performed when the production API is not ready. You may come across a\nsituation where you cannot send an API request to the server because it is not prepared. In such cases, you can mock a\nchunk of data from the response and eventually, when you make requests the mocked data will be returned."
  },
  {
    "heading": "2. Idempotency‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#1-api-data-mocking",
    "link": "#2-idempotency",
    "body": "An API is idempotent when the outcome of a successful request remains unchanged on making the same request frequently."
  },
  {
    "heading": "3. Noisy field‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#1-api-data-mocking",
    "link": "#3-noisy-field",
    "body": "Noisy field refers to the random data whose value changes each time you make a request.\nFor example, a Timestamp is one such property that returns the time when the request is made. Its value is not fed\nmanually but is automatically recorded therefore, at every call it differs."
  },
  {
    "heading": "4. Interoperability‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#1-api-data-mocking",
    "link": "#4-interoperability",
    "body": "Interoperability refers to the situation when the behavior of the data is in its original (native) format when\ntransferred from one platform to other. It reduces the dependency of files by replacing them with optimized code giving\nthe same result."
  },
  {
    "heading": "5. Deduplication Algorithm‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#1-api-data-mocking",
    "link": "#5-deduplication-algorithm",
    "body": "Deduplication is a data compression technique wherein redundant copies of the same data are identified and eliminated.\nThis process involves hash functions or similarity analysis to compare data chunks, enabling the storage system to store\nonly one instance of each unique data segment, thereby optimizing storage efficiency and reducing redundancy."
  },
  {
    "heading": "General Glossary for Users‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#2-idempotency",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "1. API data mocking‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#2-idempotency",
    "link": "#1-api-data-mocking",
    "body": "API mocking is a simulation of real APIs and is performed when the production API is not ready. You may come across a\nsituation where you cannot send an API request to the server because it is not prepared. In such cases, you can mock a\nchunk of data from the response and eventually, when you make requests the mocked data will be returned."
  },
  {
    "heading": "2. Idempotency‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#2-idempotency",
    "link": "#2-idempotency",
    "body": "An API is idempotent when the outcome of a successful request remains unchanged on making the same request frequently."
  },
  {
    "heading": "3. Noisy field‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#2-idempotency",
    "link": "#3-noisy-field",
    "body": "Noisy field refers to the random data whose value changes each time you make a request.\nFor example, a Timestamp is one such property that returns the time when the request is made. Its value is not fed\nmanually but is automatically recorded therefore, at every call it differs."
  },
  {
    "heading": "4. Interoperability‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#2-idempotency",
    "link": "#4-interoperability",
    "body": "Interoperability refers to the situation when the behavior of the data is in its original (native) format when\ntransferred from one platform to other. It reduces the dependency of files by replacing them with optimized code giving\nthe same result."
  },
  {
    "heading": "5. Deduplication Algorithm‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#2-idempotency",
    "link": "#5-deduplication-algorithm",
    "body": "Deduplication is a data compression technique wherein redundant copies of the same data are identified and eliminated.\nThis process involves hash functions or similarity analysis to compare data chunks, enabling the storage system to store\nonly one instance of each unique data segment, thereby optimizing storage efficiency and reducing redundancy."
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#re-use-mocks-for-testing-servers",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#network-layer-integration-makes-it-light-weight",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#eliminates-random-fields-for-assertion",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "General Glossary for Users‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#3-noisy-field",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "1. API data mocking‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#3-noisy-field",
    "link": "#1-api-data-mocking",
    "body": "API mocking is a simulation of real APIs and is performed when the production API is not ready. You may come across a\nsituation where you cannot send an API request to the server because it is not prepared. In such cases, you can mock a\nchunk of data from the response and eventually, when you make requests the mocked data will be returned."
  },
  {
    "heading": "2. Idempotency‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#3-noisy-field",
    "link": "#2-idempotency",
    "body": "An API is idempotent when the outcome of a successful request remains unchanged on making the same request frequently."
  },
  {
    "heading": "3. Noisy field‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#3-noisy-field",
    "link": "#3-noisy-field",
    "body": "Noisy field refers to the random data whose value changes each time you make a request.\nFor example, a Timestamp is one such property that returns the time when the request is made. Its value is not fed\nmanually but is automatically recorded therefore, at every call it differs."
  },
  {
    "heading": "4. Interoperability‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#3-noisy-field",
    "link": "#4-interoperability",
    "body": "Interoperability refers to the situation when the behavior of the data is in its original (native) format when\ntransferred from one platform to other. It reduces the dependency of files by replacing them with optimized code giving\nthe same result."
  },
  {
    "heading": "5. Deduplication Algorithm‚Äã",
    "url": "http://localhost:3000/docs/concepts/general-glossary/#3-noisy-field",
    "link": "#5-deduplication-algorithm",
    "body": "Deduplication is a data compression technique wherein redundant copies of the same data are identified and eliminated.\nThis process involves hash functions or similarity analysis to compare data chunks, enabling the storage system to store\nonly one instance of each unique data segment, thereby optimizing storage efficiency and reducing redundancy."
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "How Keploy Works?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "üåü Keploy V2 Architecture üåü‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-keploy-v2-architecture-",
    "body": ""
  },
  {
    "heading": "üéØ Goals‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-goals",
    "body": ""
  },
  {
    "heading": "üèó High-level architecture‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-high-level-architecture",
    "body": "Keploy uses eBPF to instrument applications without code changes. Key components include:"
  },
  {
    "heading": "ü™ù eBPF hooks loader‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-ebpf-hooks-loader",
    "body": "The eBPF hooks loader handles the Ingress and Egress Interceptor logic."
  },
  {
    "heading": "üåê Network Proxy‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-network-proxy",
    "body": "The Network Proxy acts as a transparent proxy for recording or mocking outgoing network calls. It processes TCP streams, matching the protocol and using the appropriate integration packages."
  },
  {
    "heading": "üñ• API server‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-api-server",
    "body": "The API server manages commands for start/stop and resource management (e.g., testicles, stubs). It's evolving to enable full agent mode, beyond just CLI."
  },
  {
    "heading": "üß™ Example‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#-example",
    "body": "Consider an application server serving HTTP APIs for clients like web/mobile apps, postman, or curl, and depending on a database and another API.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/how-keploy-works/",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-1--record-unique-network-interactions-as-test-case",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#step-2--replay-test-cases",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#key-features",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-combined-test-coverage-in-cicd",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-works-for-complex-api-flows",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#%EF%B8%8F-multi-purpose-mocks",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-code-less-ebpf-instrumentation",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#-accurate-noise-detection",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "What is Keploy?‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#heading",
    "body": ""
  },
  {
    "heading": "Step 1 : Record Unique Network Interactions as Test Case‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#step-1--record-unique-network-interactions-as-test-case",
    "body": "Once you start the application in record mode to capture API calls as test cases.\nNow, when the application serves an API, all the unique network interactions are stored within Keploy server as a\ntest-case."
  },
  {
    "heading": "Step 2 : Replay Test-Cases‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#step-2--replay-test-cases",
    "body": "Let's say you developed new application version(v2). To test locally, start the Keploy in test mode to replay all\nrecorded API calls/test-cases previously captured in record-mode.\nNow, when the application starts:\nYou can test with Keploy locally or can integrate Keploy with popular testing-frameworks and existing CI pipelines.\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Key Features‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#key-features",
    "body": "Keploy is built for a wide variety of use-cases, however, to kick things off, let's dive into some key features that\nmake Keploy stand out from the rest of the testing platforms out there."
  },
  {
    "heading": "üß© Combined Test Coverage in CI/CD:‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#-combined-test-coverage-in-cicd",
    "body": ""
  },
  {
    "heading": "Run Tests with Mocks Anywhere You Like‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#run-tests-with-mocks-anywhere-you-like",
    "body": "Keploy has native integrations with your unit-testing libraries\nlike go-test, jUnit, jest, pyTest. Keploy gives combined test-coverage and can also be integrated in existing CI\npipelines easily within go-test, jUnit, jest, pyTest workflows.\nRun tests with mocks anywhere you like‚Äîlocally on the CLI, in your CI pipeline, or even across a Kubernetes\ncluster. It's testing wherever you want it! üåç"
  },
  {
    "heading": "üìΩÔ∏è Works for Complex API Flows‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#Ô∏è-works-for-complex-api-flows",
    "body": ""
  },
  {
    "heading": "Can easily record complex API flows and replay them as tests and stubs.‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#can-easily-record-complex-api-flows-and-replay-them-as-tests-and-stubs",
    "body": "With Keploy, you can effortlessly record and replay intricate, distributed API flows as mocks and stubs. It's like\nhaving a time machine for your tests! ‚è≥\nKeploy will record all API calls and their subsequent network traffic served by the application. You can utilize your\nfavorite API management tools like Postman, Hoppscotch, or\neven Curl to generate test cases.\nKeploy automatically mocks network/external dependencies for all\nCRUD operations with correct responses.\nOnce recorded, you have the flexibility to replay and simulate the same flow with mutations/write calls locally or\nwithin your CI environment without needing to connect to external services/dependencies.\nNo more data dumps, stubs, or mocks for dependencies like DBs, internal services, or third-party services like twilio,\nshopify, or stripe are required anymore. üí°\nIdempotency guarantees are also not required in the application.\nMultiple Reads after write operations can be replicated automatically too. üîÑ"
  },
  {
    "heading": "‚ôªÔ∏è Multi-Purpose Mocks‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#Ô∏è-multi-purpose-mocks",
    "body": ""
  },
  {
    "heading": "Re-Use Mocks for Testing Servers‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#re-use-mocks-for-testing-servers",
    "body": "Keploy generated dependency mocks can also be used as test case for the server. These tests can be used for use-cases\nlike chaos testing, e2e testing, integration testing, api and regression testing. üåü"
  },
  {
    "heading": "üåê Code-less EBPF Instrumentation‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#-code-less-ebpf-instrumentation",
    "body": ""
  },
  {
    "heading": "Network Layer Integration makes it Light-Weight‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#network-layer-integration-makes-it-light-weight",
    "body": "Keploy uses EBPF like a secret sauce to make integration code-less, language agnostic, and oh-so-lightweight. üç≤"
  },
  {
    "heading": "üîç Accurate Noise Detection‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#-accurate-noise-detection",
    "body": ""
  },
  {
    "heading": "Eliminates random fields for Assertion‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#eliminates-random-fields-for-assertion",
    "body": "Keploy identifies noisy fields in the responses accurately like (\ntimestamps, random values) to ensure high quality tests.\nAs the application serves the API, Keploy re-run that API request with the captured dependency mocks.\nKeploy identifies differences in API responses, marking them as random/noisy fields. üßê‚úÖ\nHope this helps you out, if you still have any questions, reach out to us ."
  },
  {
    "heading": "Contact Us‚Äã",
    "url": "http://localhost:3000/docs/keploy-explained/introduction/#contact-us",
    "link": "#contact-us",
    "body": "If you have any questions or need help, please feel free to reach out to us at hello@keploy.io or reach out us on\n or open a discussion on"
  },
  {
    "heading": "Page Not Found‚Äã",
    "url": "http://localhost:3000/about",
    "link": "#heading",
    "body": "We could not find what you were looking for.\nPlease contact the owner of the site that linked you to the original URL and let them know their link is broken."
  },
  {
    "heading": "Page Not Found‚Äã",
    "url": "http://localhost:3000/security",
    "link": "#heading",
    "body": "We could not find what you were looking for.\nPlease contact the owner of the site that linked you to the original URL and let them know their link is broken."
  },
  {
    "heading": "Page Not Found‚Äã",
    "url": "http://localhost:3000/privacy-policy",
    "link": "#heading",
    "body": "We could not find what you were looking for.\nPlease contact the owner of the site that linked you to the original URL and let them know their link is broken."
  }
]